<?php

/**
 * @file
 * Provides basic underlying functionality and configuration options used
 * by all Rooms modules
 */


/**
 * Defining some unit availability states that will be used throughout.
 */
define ('ROOMS_NOT_AVAILABLE', 1);
define ('ROOMS_AVAILABLE', 2);
define ('ROOMS_BOOKED', 3);


/**
 * Implements hook_ctools_plugin_api().
 */
function rooms_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "facetapi" && $api == "facetapi_defaults") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_views_api().
 */
function rooms_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'rooms') . '/views',
  );
}


/**
 * Implements hook_menu().
 */
function rooms_menu() {
  $items = array();

  // Top level "Rooms" container.
  $items['admin/rooms'] = array(
    'title' => 'Rooms',
    'description' => 'Administer Rooms.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function rooms_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Create an action link on the Rooms Units admin page for adding new units.
  if ($root_path == 'admin/rooms/rooms-types') {
    $item = menu_get_item('admin/bat/config/types/add/rooms');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
  // Create an action link on the Rooms Bookings admin page for adding a new event.
  if ($root_path == 'admin/rooms/bookings') {
    $item = menu_get_item('admin/bat/events/add/availability');
    if ($item['access']) {
      $item['title'] = t('Add Booking');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * FORM_ID = type_edit_form
 */
function rooms_form_bat_type_edit_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']['#value']) && $form['type']['#value'] == 'rooms') {
    // Add a custom submit function.
    $form['actions']['submit']['#submit'][] = 'rooms_type_edit_form_submit';
    $form['actions']['delete']['#submit'][] = 'rooms_type_edit_form_submit';
    $form['actions']['delete']['#suffix'] = l(t('Cancel'), 'admin/rooms/rooms-types');
  }
}

/**
 * Custom submit function to redirct users to Rooms Types page.
 */
function rooms_type_edit_form_submit(&$form, &$form_state) {
  $form_state['redirect'] = '/admin/rooms/rooms-types';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * FORM_ID = bat_event_edit_form
 */
function rooms_form_bat_event_edit_form_alter(&$form, &$form_state, $form_id) {

  if (isset($form['type']['#value']) && $form['type']['#value'] == 'availability') {
    // Add a custom submit function.
    $form['actions']['submit']['#submit'][] = 'rooms_booking_edit_form_submit';
    $form['actions']['delete']['#submit'][] = 'rooms_booking_edit_form_submit';
    $form['actions']['cancel']['#markup'] = l(t('Cancel'), 'admin/rooms/bookings');
  }
}

/**
 * Custom submit function to redirct users to Bookings page.
 */
function rooms_booking_edit_form_submit(&$form, &$form_state) {
  $form_state['redirect'] = '/admin/rooms/bookings';
}

/**
 * Index Search Api indexes for Rooms Types.
 */
function rooms_index_search_api_indexes($index) {
  $search_api_index = search_api_index_load($index);

  // Clear the index.
  $search_api_index->clear();

  // Run the index!
  search_api_index_items($search_api_index, -1);
}

/**
 * Creates  Bat Types and some example unit.
 */
function rooms_create_rooms_type() {
  module_load_include('inc', 'rooms', 'rooms.fields');

  // Creates A Bat Type Bundle: Rooms.
  $bat_type_bundle = new BatTypeBundle(array(
    'label' => 'Rooms',
    'type' => 'rooms',
    'default_event_value_field_ids' => array(
      'availability' => 'field_rooms_default_state',
      'pricing' => 'field_rooms_default_price',
    ),
  ));

  bat_type_bundle_save($bat_type_bundle);

  // Add Default availability state and price fields.
  rooms_create_rooms_fields();

  // Add a Standard Example Room type.
  rooms_create_example_rooms_type(1, 'rooms', 'Standard', '2', 3, array('1','2','3','4','5','8','9'));
  // Add a Deluxe Example Room type.
  rooms_create_example_rooms_type(2, 'rooms', 'Deluxe', '2', 5, array('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15'));

  // Create some example unit.
  rooms_create_example_units();
}

/**
 * Creates 2 Standard and 2 Deluxe example rooms.
 */
function rooms_create_example_units() {
  $su1 = array(
    'unit_id' => 1,
    'type_id' => 1,
    'type' => 'default',
    'name' => 'Standard 1',
    'status' => 1,
  );

  bat_unit_save(bat_unit_create($su1));

  $su2 = array(
    'unit_id' => 2,
    'type_id' => 1,
    'type' => 'default',
    'name' => 'Standard 2',
    'status' => 1,
  );

  bat_unit_save(bat_unit_create($su2));

  $du1 = array(
    'unit_id' => 3,
    'type_id' => 2,
    'type' => 'default',
    'name' => 'Deluxe 1',
    'status' => 1,
  );

  bat_unit_save(bat_unit_create($du1));

  $du2 = array(
    'unit_id' => 4,
    'type_id' => 2,
    'type' => 'default',
    'name' => 'Deluxe 2',
    'status' => 1,
  );

  bat_unit_save(bat_unit_create($du2));
}

/**
 * Creates an Amenities vocabulary.
 */
function rooms_create_amenities_vocabulary() {
  $amenites_vocabulary = (object) array(
    'name' => 'Amenities',
    'description' => 'A vocabulary used by the Rooms module to describe amenities',
    'machine_name' => 'amenities',
  );

  taxonomy_vocabulary_save($amenites_vocabulary);
  rooms_create_example_amenities_terms();
}

/**
 * A List of example amenities.
 */
function rooms_example_amenities() {
  return array(
    t('TV'),
    t('Cable TV'),
    t('Air Conditioning'),
    t('Heating'),
    t('Kitchen'),
    t('Internet'),
    t('Wireless Internet'),
    t('Breakfast'),
    t('Smoke Detector'),
    t('Carbon Monoxide Detector '),
    t('Doorman'),
    t('Elevator'),
    t('Suitable for Events'),
    t('Family/Kid friendy'),
    t('Fire Extinguisher'),
    t('First aid kit'),
    t('Free Parking on Premises'),
    t('Gym'),
    t('Hot tub'),
    t('Indoor Fireplace'),
    t('Minibar'),
    t('Pets Allowed'),
    t('Pool'),
    t('Shampoo'),
    t('Smoking Allowed'),
    t('Washer'),
    t('Wireless Intercom'),
    t('Dryer'),
    t('Towels'),
  );
}

/**
 * Creates Amenities example terms.
 */
function rooms_create_example_amenities_terms() {
  foreach (rooms_example_amenities() as $name) {
    $vocabulary = taxonomy_vocabulary_machine_name_load('amenities');
    $term = new stdClass();
    $term->name = $name;
    $term->vid = $vocabulary->vid;
    taxonomy_term_save($term);
  }
}


function rooms_create_example_rooms_type($type_id, $type, $name, $default_state = NULL, $sleeps = 2, $amenities = array()) {

  $module_path = drupal_get_path('module', 'rooms');

  $bat_type = bat_type_create(array(
    'type_id' => $type_id,
    'type' => $type,
    'name' => $name,
    'status' => 1,
    'bookable' => 1,
    'created' => REQUEST_TIME,
    )
  );

  $bat_type->field_rooms_sleeps[LANGUAGE_NONE][0]['value'] = $sleeps;
  if ($default_state) {
    $bat_type->field_rooms_default_state[LANGUAGE_NONE][0]['state_id'] = $default_state;
  }
  if (!empty($amenities)) {
    $i = 0;
    foreach($amenities as $amenity) {
      $bat_type->field_rooms_amenities[LANGUAGE_NONE][$i]['tid'] = $amenity;
      $i++;
    }
  }

  $default = drupal_realpath($module_path . '/default_images/default.jpg');
  // Create managed File object and associate with Image field.
  $default_image = (object) array(
    'uid' => 1,
    'uri' => $default,
    'filemime' => file_get_mimetype($default),
    'status' => 1,
  );

  // save the file to the root of the files directory.
  $default_image = file_copy($default_image, 'public://');
  $bat_type->field_rooms_image[LANGUAGE_NONE][0] = (array)$default_image;

  bat_type_save($bat_type);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * FORM_ID = views_exposed_form
 */
function rooms_form_views_exposed_form_alter(&$form, &$form_state) {
  // Events admin view exposed filters.
  if ($form['#id'] == 'views-exposed-form-rooms-bookings-page-1') {
    $form['start_date']['#type'] = 'date_popup';
    $form['start_date']['#date_format'] = 'd/m/Y';
    $form['start_date']['#date_label_position'] = 'before';

    $form['end_date']['#type'] = 'date_popup';
    $form['end_date']['#date_format'] = 'd/m/Y';
    $form['end_date']['#date_label_position'] = 'before';

    $form['#attached']['css'][] = array(
      'data' => '.views-exposed-form .views-exposed-widget { height: 70px; }',
      'type' => 'inline',
    );
  }
}
