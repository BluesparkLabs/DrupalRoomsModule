<?php

/**
 * @file
 * Testing for the rooms suite of modules 
 */


/**
 * Implements hook_menu().
 */
function rooms_test_menu() {
  $items = array();

  $items['admin/rooms/test/test1'] = array(
    'title' => 'Commerce Test',
    'description' => 'Create product and add to cart',
    'page callback' => 'rooms_test_commerce',
		'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access administration pages'),
  );
	
	
	$items['admin/rooms/test/test2'] = array(
    'title' => 'Availability Search Test',
    'description' => 'Search for availability',
    'page callback' => 'rooms_test_availability',
		'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access administration pages'),
  );
	
	
	$items['admin/rooms/test/test3'] = array(
    'title' => 'Event Update Tests',
    'description' => 'Tests for event update',
    'page callback' => 'rooms_test_event_update',
		'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access administration pages'),
  );

  return $items;
}


function rooms_test_availability() {
	
	$output = '';
	
	$output .= render(drupal_get_form('rooms_booking_availability_search_form'));
	
	return $output;
}


function rooms_test_event_update() {
	
	$s = new DateTime('2011-07-11');
	$e = new DateTime('2011-07-14');

	$rc = new UnitPricingCalendar(2);
	
	$rc->calculatePrice($s, $e);
	
	
	return 'hello';
}



function rooms_test_commerce(){
	$output = '';
	$line_item = commerce_line_item_load(15);
	dpm($line_item);
	
	$product = commerce_product_load(34);
	
	dpm($product);
	
	
	
	$order = commerce_order_load(33);
	$ow = entity_metadata_wrapper('commerce_order', $order);
  //dpm($ow->status->value());
	$ow->status->set('rooms_unit_canceled');
  //dpm($ow->status->value());
	commerce_order_save($order);
	

	
	//rooms_booking_install();
	
	/*
	global $user;
	//dpm($user);
	global $language;
	
	$nights = commerce_product_new('rooms_booking');
	$nights->sku = 'VROOMS123' . time() . 'boia';
	$nights->title = 'Booking';
	
	commerce_product_save($nights);
	
	$s = new DateTime('2011-12-10');
	$e = new DateTime('2011-12-20');
	
	$currency = commerce_currency_load('USD');
	dpm($currency);
	
	$amount = commerce_currency_amount_to_decimal(310.10, $currency['code']);
	dpm($amount);
	
	$commerce_price = array(
		'und' => array(
			array( 
				'amount' => 30000,
				'currency_code' => 'USD',
				'data' => array(''),
			),
		),
	);
	
	
	
	$commerce_dates = array(
		'und' => array( array( 
			'value' => $s->format('Y-m-d'),
			'value2' => $e->format('Y-m-d'),
		)),		
	);
	
	$nights->commerce_price = $commerce_price;
	$nights->rooms_booking_dates = $commerce_dates;	


	field_attach_update('commerce_product', $nights);

	dpm($nights);
	
	$product_wrapper = entity_metadata_wrapper('commerce_product', $nights);
	//dpm($product_wrapper->commerce_price->value());
	//dpm($nights);
	$line_item = commerce_product_line_item_new($nights, 1, 0, array(), 'product');
	dpm($line_item);

	//$line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

	//dpm($line_item_wrapper->line_item_label->value());
	//$line_item_wrapper->line_item_label->set("3 notti da a");
	
	
	
	$line_item = commerce_cart_product_add($user->uid, $line_item, FALSE);
	
	//dpm($line_item);
	

	
	//$s = new DateTime("2011-7-14");
  //$e = new DateTime("2011-7-16"); 
  //$rc = new UnitCalendar(1);
  
  //if  ($rc->stateAvailability($s, $e, array(100, 200, AVAILABLE))){
  //  dpm('states pass');
  //} else {
  //  dpm('no availability');
  //}
	
	
	*/
	
	return $output;
}


function rooms_test_booking_install() {

  $product_type = commerce_product_ui_product_type_new();

  $product_type['type'] = 'rooms_booking';
  $product_type['name'] = t('Booking');
  $product_type['description'] = t('A Rooms Booking.');
  $product_type['is_new'] = TRUE;

  commerce_product_ui_product_type_save($product_type, FALSE);
  commerce_price_create_instance('commerce_price', 'commerce_product', 'rooms_booking', t('Price'), 0, 'calculated_sell_price');
	
	$field_data = rooms_booking_product_type_add_fields();
	
	if ((!field_info_field_types('rooms_booking_dates')) || (!field_info_field_types('rooms_booked_unit_id'))) {
    field_cache_clear();
  }

  // Look for or add the specified price field to the requested entity bundle.
  $field_date = field_info_field('rooms_booking_dates');
  $instance_date = field_info_instance('commerce_product', 'rooms_booking_dates', 'rooms_booking');
	
	if (empty($field_date)) {
		field_create_field($field_data['rooms_booking_dates']);		
	}
	if (empty($instance_date)) {
		field_create_instance($field_data['rooms_booking_dates_instance']);	
	}


  $field_id = field_info_field('rooms_booked_unit_id');
  $instance_id = field_info_instance('commerce_product', 'rooms_booked_unit_id_instance', 'rooms_booking');
	
	if (empty($field_id)) {
		field_create_field($field_data['rooms_booked_unit_id']);		
	}
	if (empty($instance_id)) {
		field_create_instance($field_data['rooms_booked_unit_id_instance']);	
	}
}



function rooms_booking_product_type_add_fields() {
	
	$field_data = array (
		'rooms_booking_dates' => array (
			'field_name' => 'rooms_booking_dates',
			'label' => t('Booking Dates'),
			'cardinality'  => 1,
			'type'         => 'date',
			'module' => 'date',
			'active' => '1',
			'locked' => '1',
			'settings' => array(
			  'repeat' => 0,
			  'todate' => 'required',
			  'granularity' => array(
			    'year' => 'year',
			    'month' => 'month',
			    'day' => 'day',
			  ),
			  'tz_handling' => 'none',
			  'timezone_db' => '',
			),
		),
	  'rooms_booking_dates_instance' => array (
			'field_name' => 'rooms_booking_dates',
			'label' => t('Booking Dates'),
			'entity_type' => 'commerce_product',
			'bundle' => 'rooms_booking',
			'required' => FALSE,
			'widget' => array(
			  'type' => 'date_popup',
			  'module' => 'date',
			  'settings' => array (
			    'default_value' => 'now',
			    'default_format' => 'medium',
			  ),
			),  
		),	
		'rooms_booked_unit_id' => array (
			'field_name' => 'rooms_booked_unit_id',
			'label' => t('Booked Unit ID'),
			'cardinality' => 1,
			'type' => 'number_integer',
			'module' => 'number',
			'active' => 1,
			'locked' => 1,
		),	
		'rooms_booked_unit_id_instance' => array (
			'field_name' => 'rooms_booked_unit_id',
			'label' => t('Booked Unit ID'),
			'entity_type' => 'commerce_product',
			'bundle' => 'rooms_booking',
			'required' => true,
			'widget' => array (
        'type' => 'text_textfield',
        'settings' => array(
					'size' => 8,
				),				
			),
		)
	);

  return $field_data;
}