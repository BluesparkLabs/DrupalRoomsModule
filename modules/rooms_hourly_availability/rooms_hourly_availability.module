<?php

/**
 * @file
 * Manages availability for Bookable Units and displaying dates on the jquery
 * FullCalendar plugin.
 */

define ('ROOMS_HOURLY_BOOKED', 5);

/**
 * Implements hook_menu().
 */
function rooms_hourly_availability_menu() {
   $items = array();

  $items['rooms/units/unit/%rooms_unit/day-availability/json/%'] = array(
    'title' => 'Availability Event',
    'page callback' => 'rooms_hourly_availability_event',
    'page arguments' => array(3, 6),
    'access callback' => 'rooms_unit_access',
    'access arguments' => array('view', 3),
    'type' => MENU_CALLBACK,
    'weight' => 30,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function rooms_hourly_availability_menu_alter(&$items) {
  $items['admin/rooms/units/unit/%rooms_unit/availability']['page callback'] = 'rooms_hourly_availability_page';
}

/**
 * Implements hook_theme().
 */
function rooms_hourly_availability_theme() {
  return array(
    'rooms_two_month_calendar' => array(
      'template' => 'rooms_two_month_calendar',
      'variables' => array(
        'url' => NULL,
        'form' => NULL,
        'year' => NULL,
        'month' => NULL,
        'link_options' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_entity_delete().
 */
function rooms_hourly_availability_entity_delete($entity, $type) {
  if ($type == 'rooms_booking') {
    // Remove data related to entity from rooms_hourly_availability table.
    db_delete('rooms_hourly_availability')
      ->condition('state', rooms_availability_assign_id($entity->booking_id, $entity->booking_status))
      ->execute();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rooms_hourly_availability_form_rooms_booking_edit_form_alter(&$form, &$form_state) {
  $form['rooms_date_range']['rooms_start_date']['#date_format'] = 'd/m/Y H:i';
  $form['rooms_date_range']['rooms_end_date']['#date_format'] = 'd/m/Y H:i';

  if (isset($_GET['startdate'])) {
    $startdate = (is_numeric(check_plain($_GET['startdate']))) ? check_plain($_GET['startdate']) : '';
    if ($startdate != '') $form['rooms_date_range']['rooms_start_date']['#default_value'] = gmdate('Y-m-d H:i', $startdate);
  }

  if (isset($_GET['enddate'])) {
    $enddate = (is_numeric(check_plain($_GET['enddate']))) ? check_plain($_GET['enddate']) : '';
    if ($enddate != '') $form['rooms_date_range']['rooms_end_date']['#default_value'] = gmdate('Y-m-d H:i', $enddate);
  }

  $form['actions']['submit']['#submit'][] = 'rooms_hourly_availability_form_rooms_booking_edit_form_submit';
}

/**
 *
 */
function rooms_hourly_availability_form_rooms_booking_edit_form_submit($form, &$form_state) {
  $booking = $form_state['rooms_booking'];

  db_merge('rooms_hourly_availability')
    ->key(array('unit_id' => $booking->unit_id, 'start_date' => $booking->start_date, 'end_date' => $booking->end_date))
    ->fields(array(
      'unit_id' => $booking->unit_id,
      'start_date' => $booking->start_date,
      'end_date' => $booking->end_date,
      'state' => rooms_availability_assign_id($booking->booking_id, $booking->booking_status),
    ))
    ->execute();
}

/**
 *
 */
function rooms_hourly_availability_page(RoomsUnit $rooms_unit, $year = '', $month = '') {
  $rooms_unit_type = rooms_unit_type_load($rooms_unit->type);

  if ($rooms_unit_type->data['hourly_availability']) {
    // Set the page title.
    drupal_set_title(t('Edit @unit_name Availability', array('@unit_name' => $rooms_unit->name)));

    // Add styles.
    rooms_availability_modal_style();

    drupal_add_library('system', 'drupal.vertical-tabs');

    $openingtime = rooms_hourly_availability_get_opening_time($rooms_unit);

    // Get the current page's URL, striped of the year and month args.
    // This allows us to place this page anywhere, including at
    // unit/%/availability  or  admin/rooms/units/unit/%/availability
    list($url) = explode('/' . $year . '/' . $month, current_path());

    $js_file = drupal_get_path('module', 'rooms_hourly_availability') . '/js/rooms_hourly_availability.js';
    $css_file = drupal_get_path('module', 'rooms_availability') . '/css/rooms_availability.css';
    // Show full day events on calendar.
    if (variable_get('rooms_calendar_events_view', '0') == '1') {
      $js_file = drupal_get_path('module', 'rooms_availability') . '/js/rooms_availability_full_day.js';
    }
    return array(
      '#theme' => 'rooms_two_month_calendar',
      '#url' => $url,
      '#form' => drupal_get_form('update_availability_calendar_form', $rooms_unit->unit_id, $year, $month),
      '#year' => $year,
      '#month' => $month,
      '#attached' => array(
        'css' => array(
          $css_file,
        ),
        'js' => array(
          $js_file,
          array(
            'data' => array('roomsHourlyAvailability' => array('roomID' => $rooms_unit->unit_id, 'openingTime' => $openingtime)),
            'type' => 'setting',
          ),
        ),
      ),
    );
  }
  else {
    return rooms_availability_page($rooms_unit, $year, $month);
  }
}

/**
 * Default implementation of hook_preprocess_rooms_two_month_calendar().
 *
 * Here we setup the two-month calendar based on a specified year, month, and url.
 */
function rooms_hourly_availability_preprocess_rooms_two_month_calendar(&$vars) {

  // Load FullCalendar.
  rooms_fullcalendar_loaded();

  // Add css styles for three-month-calendar.
  drupal_add_css(drupal_get_path('module', 'rooms_hourly_availability') . '/css/rooms_two_month_calendar.css');
  drupal_add_css(drupal_get_path('module', 'rooms_availability') . '/css/fullcalendar.theme.css');

  // If dates are not provided then use the current date.
  $year = (empty($vars['year'])) ? date('Y', time()) : check_plain($vars['year']);
  $month = (empty($vars['month'])) ? date('n', time()) : check_plain($vars['month']);

  // Inject settings in javascript that will be used to setup the three months
  // display.
  drupal_add_js(array('roomsCalendar' => array('currentMonth' => intval($month))), 'setting');
  drupal_add_js(array('roomsCalendar' => array('currentYear' => intval($year))), 'setting');
  drupal_add_js(array('roomsCalendar' => array('firstDay' => intval(variable_get('date_first_day', 0)))), 'setting');

  // Calculate forward and back dates for the 3-month view calendar.
  $date1 = new DateTime("$year-$month-1");
  $date2 = new DateTime("$year-$month-1");
  $date_current = new DateTime("now");

  $forward = $date1->add(new DateInterval('P2M'));
  $backward = $date2->sub(new DateInterval('P2M'));

  // Create the links based off the url variable passed in.
  if (!isset($vars['url'])) {
    $vars['url'] = '';
  }

  $forward_path = $vars['url'] . '/' . $forward->format('Y') . '/' . $forward->format('n');
  $backward_path = $vars['url'] . '/' . $backward->format('Y') . '/' . $backward->format('n');
  $current_path = $vars['url'] . '/' . $date_current->format('Y') . '/' . $date_current->format('n');

  if (!is_array($vars['link_options']) || empty($vars['link_options'])) {
    $vars['link_options'] = array();
  }
  $vars['forward_link'] = l(t('Forward'), $forward_path, $vars['link_options']);
  $vars['backward_link'] = l(t('Back'), $backward_path, $vars['link_options']);
  $vars['current_link'] = l(t('Current'), $current_path, $vars['link_options']);
}

/**
 *
 */
function rooms_hourly_availability_event($unit, $date, $duration = '1D') {

  // If user don't have 'view anonymous availability information' permission.
  if (!(user_access('view anonymous availability information') || rooms_unit_access('update availability', $unit))) {
    echo drupal_json_encode(array());
    return;
  }

  $json_events = array();
  $json_events = rooms_hourly_availability_generate_json($unit, $date, $duration);

  $start_date = new DateTime(substr($date, 0, 10));
  $interval = new DateInterval('P1D');
  $end_date = clone($start_date);
  $end_date->add(new DateInterval('P' . $duration));

  $period = new DatePeriod($start_date, $interval, $end_date);

  $opening_time = rooms_hourly_availability_get_opening_time($unit);
  if (!empty($opening_time)) {
    foreach ($period as $dt) {
      if (in_array($dt->format('w'), $opening_time['dow'])) {
        $json_events[] = array(
          'start' => $dt->format('Y-m-d') . 'T' . $opening_time['opening'] . 'Z',
          'end' => $dt->format('Y-m-d') . 'T' . $opening_time['closing'] . 'Z',
          'rendering' => 'background',
          'background' => variable_get('rooms_available_color', '#8BA175'),
        );
      }
    }
  }
  else {
    foreach ($period as $dt) {
      $json_events[] = array(
        'start' => $dt->format('Y-m-d') . 'T00:00:00Z',
        'end' => $dt->format('Y-m-d') . 'T23:59:59Z',
        'rendering' => 'background',
        'background' => variable_get('rooms_available_color', '#8BA175'),
      );
    }
  }

  echo drupal_json_encode($json_events);
}

/**
 *
 */
function rooms_hourly_availability_generate_json($unit, $date, $duration) {
  $json_events  = array();

  $start_date = new DateTime(substr($date, 0, 10));
  $end_date = clone($start_date);
  $end_date->add(new DateInterval('P' . $duration));

  $start = $start_date->format('Y-m-d');
  $end = $end_date->format('Y-m-d');

  $query = db_select('rooms_hourly_availability', 'n')
            ->fields('n', array('id', 'start_date', 'end_date', 'state'))
            ->condition('unit_id', $unit->unit_id)
            ->where("start_date > '$start' and end_date < '$end'");
  $results = $query->execute()->fetchAll();

  foreach ($results as $result) {
    $event = array(
      'id' => $result->state,
      'start' => str_replace(' ', 'T', $result->start_date) . 'Z',
      'end' => str_replace(' ', 'T', $result->end_date) . 'Z',
      'title' => $result->id,
    );

    switch ($result->state) {
      case ROOMS_NOT_AVAILABLE:
        $event['color']  = variable_get('rooms_not_available_color', '#CC2727');
        $event['title'] = variable_get('rooms_not_available_text', 'N/A');
        break;

      case ROOMS_AVAILABLE:
        $event['color'] = variable_get('rooms_available_color', '#8BA175');
        $event['title'] = variable_get('rooms_available_text', 'AV');
        break;

      case ($result->state < 0):
        $event['color'] = variable_get('rooms_unconfirmed_booking_color', '#6D8C9C');
        $event['title'] = variable_get('rooms_unconfirmed_booking_text', 'UNCONF');
        break;

      default:
        $event['color'] = '#017eba';
    }

    // Check if we are dealing with a booking.
    if ($result->state > 10 || $result->state < -10) {
      // Get the actual booking id.
      $booking_id = rooms_availability_return_id($result->state);
      $booking = rooms_booking_load($booking_id);

      $event['title'] = t('Booking') . ': ' . $booking->booking_id;
    }

    $json_events[] = $event;
  }

  return $json_events;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rooms_hourly_availability_form_rooms_availability_event_manager_form_alter(&$form, &$form_state) {
  if (isset($form['change_event_status']['#ajax']['callback'])) {
    $form['change_event_status']['#ajax']['callback'] = 'rooms_hourly_availability_ajax_event_status_change';

    $form['event_details']['#markup'] = t('Duration: @startdate to @enddate', array('@startdate' => $form['rooms_start_date']['#value']->format('Y-m-d H:i'), '@enddate' => $form['rooms_end_date']['#value']->format('Y-m-d H:i')));
  }
}

/**
 *
 */
function rooms_hourly_availability_ajax_event_status_change($form, $form_state) {
  $start_date = $form_state['values']['rooms_start_date']->format('Y-m-d H:i:s');
  $end_date = $form_state['values']['rooms_end_date']->format('Y-m-d H:i:s');
  $unit_id = $form_state['values']['unit_id'];
  $event_id = $form_state['values']['event_id'];
  $new_event_id = $form_state['values']['change_event_status'];

  // If we have a new event id go ahead and update event.
  if (($event_id != $new_event_id) && $new_event_id != -1) {
    db_merge('rooms_hourly_availability')
    ->key(array('unit_id' => $unit_id, 'start_date' => $start_date, 'end_date' => $end_date))
    ->fields(array(
      'unit_id' => $unit_id,
      'start_date' => $start_date,
      'end_date' => $end_date,
      'state' => $new_event_id,
    ))
    ->execute();

    $state_options = rooms_unit_state_options();
    if ($event_id >= -1) {
      $form['form_wrapper_bottom']['#markup'] = t('Updated event from <strong>@old_status</strong> to <strong>@new_status</strong>.', array('@old_status' => $state_options[$event_id], '@new_status' => $state_options[$new_event_id]));
    }
    else {
      $form['form_wrapper_bottom']['#markup'] = t('New Event state is <strong>@state</strong>.', array('@state' => $state_options[$new_event_id]));
    }
  }

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rooms_hourly_availability_form_rooms_unit_type_form_alter(&$form, &$form_state) {
  $unit_type = $form_state['rooms_unit_type'];

  if (isset($form['additional_settings'])) {
    $form['additional_settings'] = array(
      '#type' => 'vertical_tabs',
      '#weight' => 99,
    );
  }

  $form['hourly_availability'] = array(
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#title' => t('Hourly availability'),
    '#tree' => FALSE,
    '#weight' => 80,
  );

  $form['hourly_availability']['enable_hourly_availability'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable hourly availability'),
    '#default_value' => isset($unit_type->data['hourly_availability']) ? $unit_type->data['hourly_availability'] : NULL,
  );

  $form['actions']['submit']['#submit'][] = 'rooms_hourly_availability_form_rooms_unit_type_form_submit';
}

/**
 *
 */
function rooms_hourly_availability_form_rooms_unit_type_form_submit($form, &$form_state) {
  $form_state['rooms_unit_type']->data['hourly_availability'] = $form_state['values']['enable_hourly_availability'];
  $form_state['rooms_unit_type']->save();

  if ($form_state['values']['enable_hourly_availability']) {
    rooms_hourly_availability_add_opening_time_field('rooms_unit', $form_state['rooms_unit_type']->type);
  }
}

function rooms_hourly_availability_get_opening_time($rooms_unit) {
  $openingtime = array();
  if (isset($rooms_unit->rooms_opening_time[LANGUAGE_NONE][0]['value']) &&
      isset($rooms_unit->rooms_opening_time[LANGUAGE_NONE][0]['value2'])) {

    $time_format = array(
      'hour' => 'H',
      'minute' => 'i',
      'separator' => ':',
      'period' => 'none',
    );

    $openingtime['opening'] = timefield_integer_to_time($time_format, $rooms_unit->rooms_opening_time[LANGUAGE_NONE][0]['value']);
    $openingtime['closing'] = timefield_integer_to_time($time_format, $rooms_unit->rooms_opening_time[LANGUAGE_NONE][0]['value2']);

    $dow = array();
    if ($rooms_unit->rooms_opening_time[LANGUAGE_NONE][0]['mon'] == 1) {
      $dow[] = 1;
    }
    if ($rooms_unit->rooms_opening_time[LANGUAGE_NONE][0]['tue'] == 1) {
      $dow[] = 2;
    }
    if ($rooms_unit->rooms_opening_time[LANGUAGE_NONE][0]['wed'] == 1) {
      $dow[] = 3;
    }
    if ($rooms_unit->rooms_opening_time[LANGUAGE_NONE][0]['thu'] == 1) {
      $dow[] = 4;
    }
    if ($rooms_unit->rooms_opening_time[LANGUAGE_NONE][0]['fri'] == 1) {
      $dow[] = 5;
    }
    if ($rooms_unit->rooms_opening_time[LANGUAGE_NONE][0]['sat'] == 1) {
      $dow[] = 6;
    }
    if ($rooms_unit->rooms_opening_time[LANGUAGE_NONE][0]['sun'] == 1) {
      $dow[] = 7;
    }
    $openingtime['dow'] = $dow;
  }

  return $openingtime;
}

/**
 *
 */
function rooms_hourly_availability_add_opening_time_field($entity_type, $bundle) {
  field_info_cache_clear();
  // Create field ('rooms_opening_time') if not exists.
  if (field_read_field('rooms_opening_time') === FALSE) {
    $field = array(
      'field_name' => 'rooms_opening_time',
      'type' => 'timefield',
      'cardinality' => 1,
      'settings' => array(
        'totime' => 'required',
        'weekly_summary' => 1,
      ),
    );
    field_create_field($field);
  }

  field_cache_clear();

  if (field_read_instance($entity_type, 'rooms_opening_time', $bundle) === FALSE) {
    // Create the instance on the bundle.
    $instance = array(
      'field_name' => 'rooms_opening_time',
      'entity_type' => $entity_type,
      'label' => 'Opening time',
      'bundle' => $bundle,
      'required' => FALSE,
      'widget' => array(
        'type' => 'timefield_standard',
      ),
    );
    field_create_instance($instance);
  }
}
