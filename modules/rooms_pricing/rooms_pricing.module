<?php

/**
 * @file
 * Manages pricing for Bookable Units and displaying dates on the jquery FullCalendar
 * plugin
 */

define ('ROOMS_PER_NIGHT', 'rooms_per_night');
define ('ROOMS_PER_PERSON', 'rooms_per_person');


/**
 * Implements hook_permission().
 */
function rooms_pricing_permission() {
  $permissions = array(
    'manage booking unit pricing' => array(
      'title' => t('manage booking unit pricing'),
      'description' => t('Allows users to manage pricing settings for Rooms.'),
      'restrict access' => TRUE,
    ),
  );

  // Generate permissions per room type.
  foreach (rooms_unit_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit pricing own $type_name bookable unit" => array(
        'title' => t('%type_name: Manage pricing on own bookable unit', array('%type_name' => $type->label)),
      ),
      "edit pricing any $type_name bookable unit" => array(
        'title' => t('%type_name: Manage pricing on any bookable unit', array('%type_name' => $type->label)),
      ),
    );
  }

  return $permissions;
}

/**
 * Implements hook_rooms_unit_operations().
 */
function rooms_pricing_rooms_unit_operations() {
  return array('pricing');
}

/**
 * Implements hook_rooms_unit_access().
 */
function rooms_pricing_rooms_unit_access($unit, $op, $account) {
  $type = is_string($unit) ? $unit : $unit->type;

  if (array_key_exists($type, rooms_unit_get_types())) {
    if ($op == 'create' && user_access('create ' . $type . ' bookable unit', $account)) {
      return ROOMS_ACCESS_ALLOW;
    }

    if ($op == 'pricing') {
      if (user_access('edit pricing any ' . $type . ' bookable unit', $account) || (user_access('edit pricing own ' . $type . ' bookable unit', $account) && ($account->uid == $unit->uid))) {
        return ROOMS_ACCESS_ALLOW;
      }
    }
  }

  return ROOMS_ACCESS_IGNORE;
}

/**
 * Implements hook_menu().
 */
function rooms_pricing_menu() {
  $items  =  array();

  $items['admin/rooms/units/unit/%pricing_unit/pricing'] = array(
    'title' => 'Manage Pricing',
    'page callback' =>  'rooms_pricing_page',
    'page arguments' => array(4, 6, 7),
    'access callback' => 'rooms_unit_access',
    'access arguments' => array('pricing', 4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => '30',
  );

  $items['admin/rooms/units/unit/%pricing_unit/pricing/json/%/%'] = array(
    'title' =>  'Pricing Info',
    'page callback' => 'rooms_pricing_json',
    'page arguments' => array(4, 7, 8, 9, 10, 11, 12),
    'access callback' => 'rooms_unit_access',
    'access arguments' => array('pricing', 4),
    'type' => MENU_CALLBACK,
    'weight' => '30',
  );

  $items['admin/rooms/units/bulk_pricing_management'] = array(
    'title' => 'Bulk pricing management',
    'page callback' => 'rooms_pricing_bulk_pricing_management',
    'page arguments' => array(4, 5, 6),
    'access arguments' => array('manage booking unit pricing'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/rooms/select-all-pages-pr'] = array(
    'title' => 'AJAX Select all pricing pages callback',
    'type' => MENU_CALLBACK,
    'page callback' => 'rooms_pricing_pr_ajax_callback',
    'access arguments' => array('manage booking unit pricing'),
  );

  return $items;
}

/**
 * Menu load for units - calls the actual rooms_unit_load implemented in rooms_unit.module
 */
function pricing_unit_load($unit_id) {
  $unit = rooms_unit_load($unit_id);
  return $unit;
}

/**
 * Callback for admin/rooms/units/unit/%pricing_unit/pricing - builds pricing
 * page by adding calendar and pulling events from pricing table.
 *
 */
function rooms_pricing_page(RoomsUnit $rooms_unit, $year='', $month='') {
  // Set the page title.
  drupal_set_title(t('Edit @unit_name Pricing', array('@unit_name' => $rooms_unit->name)));

  // Get the current page's URL, striped of the year and month args.
  // This allows us to place this page anywhere, including at
  // unit/%/pricing  or  admin/rooms/units/unit/%/pricing
  list($url) = explode('/' . $year . '/' . $month, current_path());

  return array(
    '#theme' => 'rooms_three_month_calendar',
    '#url' => $url,
    '#form' => drupal_get_form('update_unit_pricing_form', $rooms_unit->unit_id),
    '#year' => $year,
    '#month' => $month,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'rooms_pricing') . '/js/rooms_pricing.js',
        array(
          'data' => array('roomsPricing' => array('roomID' => $rooms_unit->unit_id)),
          'type' => 'setting',
        ),
      ),
      'css' => array(
        drupal_get_path('module', 'rooms_pricing') . '/css/rooms_pricing.css',
      ),
    ),
  );
}

/**
 * A basic form that allows us to update the state of the calendar
 */
function update_unit_pricing_form($form, &$form_state, $unit_id) {

  $form['#attributes']['class'][] = 'rooms-management-form unit-pricing-form';

  $form['rooms_update_pricing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update Unit Pricing'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Careful - this will overwrite any existing pricing info.'),
  );

  $form['rooms_update_pricing']['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit_id,
  );

  $form['rooms_update_pricing']['rooms_date_range'] = array(
    '#type' => 'fieldset',
  );

  $form['rooms_update_pricing']['rooms_date_range'] += rooms_date_range_fields();
  // Unset a js setting that is not relevant for pricing
  drupal_add_js(array('rooms' => array('roomsBookingStartDay' => 0)), 'setting');

  $form['rooms_update_pricing']['op'] = array(
    '#type' => 'fieldset',
  );

  $price_options = rooms_price_options_options();
  $form['rooms_update_pricing']['op']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#options' => $price_options,
    '#default_value' =>  'replace',
  );

  $form['rooms_update_pricing']['op']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => '',
    '#size' => '5',
    '#description' => t('Amount to apply for rule'),
    '#maxlength' => 10,
    '#required' => TRUE,
  );

  $form['rooms_update_pricing']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['rooms_update_pricing']['#submit'])) {
    $submit += $form['rooms_update_pricing']['#submit'];
  }

  $form['rooms_update_pricing']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Unit Pricing'),
    '#submit' => $submit + array('update_unit_pricing_form_submit'),
  );

  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'rooms_form_start_end_dates_validate';
  $form['#validate'][] = 'update_unit_pricing_form_validate';

  return $form;
}

/**
 * Validate callback form update_unit_pricing_form form.
 */
function update_unit_pricing_form_validate(&$form, &$form_state) {
  // Make sure amount entered is numeric
  if (!empty($form_state['values']['amount']) && !is_numeric($form_state['values']['amount'])) {
    form_set_error('amount', t('%name: you must enter a numeric value for the price.', array('%name' => 'Amount')));
  }
}

/**
 * Submit callback form update_unit_pricing_form form.
 */
function update_unit_pricing_form_submit(&$form, &$form_state) {
  list($start_date, $end_date) = rooms_form_input_get_start_end_dates($form_state);
  $operation = $form_state['values']['operation'];
  $amount = $form_state['values']['amount'];
  $unit_id = $form_state['values']['unit_id'];

  // Get all the pricing events for the date range
  $rc = new UnitPricingCalendar($unit_id);
  $pe = new PricingEvent($unit_id, $amount, $start_date, $end_date, $operation);
  $events = array($pe);

  $rc->updateCalendar($events);
}

/**
 * Creates the necessary json for the date range provided - needs at least start year and month at which point it will
 * return the entire month.
 */
function rooms_pricing_json($unit, $start_year = '', $start_month = '', $start_day = '', $end_year = '', $end_month = '', $end_day = '') {

  $start_year = (int)$start_year;
  $start_month = (int)$start_month;
  $start_day = (int)$start_day;

  $end_year = (int)$end_year;
  $end_month = (int)$end_month;
  $end_day = (int)$end_day;

  $eom = rooms_end_of_month_dates($start_year);

  if (($start_year == 0) || ($start_month == 0)) {
    echo drupal_json_encode('missing basic info');
    return;
  }
  elseif ($start_day == 0) {
    $start_date = new DateTime("$start_year-$start_month-1");
    $end_day = $eom[$start_month];
    $end_date = new DateTime("$start_year-$start_month-$end_day");
  }
  elseif ($start_day != 0 && $end_year == 0) {
    $start_date = new DateTime("$start_year-$start_month-$start_day");
    $end_date = new DateTime("$start_year-$start_month-15");
    $end_date->add(new DateInterval('P1M'));
    $end_year = $end_date->format('Y');
    $end_month = $end_date->format('n');
    $end_day = $eom[$end_date->format('n')];
    $end_date = new DateTime("$end_year-$end_month-$end_day");
  }
  else{
    $start_date = new DateTime("$start_year-$start_month-$start_day");
    $end_date = new DateTime("$end_year-$end_month-$end_day");
  }

  $rc = new UnitPricingCalendar($unit->unit_id);

  $events = $rc->getEvents($start_date, $end_date);
  $json_events  = array();

  foreach ($events as $event) {
    $json_events[] = $event->formatJson();
  }

  echo drupal_json_encode($json_events);
}

/**
 * Page callback for Bulk Pricing Management.
 */
function rooms_pricing_bulk_pricing_management($year = '', $month = '', $type = 'all', $action = '', $start = '', $end = '') {
  // Load FullCalendar and relevant js/css
  rooms_fullcalendar_loaded();

  // If year is not set then give it the current date
  $year = ($year == '') ? date('Y', time()) : $year;
  $month = ($month == '') ? date('n', time()) : $month;
  $type = ($type == '') ? 'all' : $type;

  // It's not a valid unit type
  if (rooms_unit_get_types($type) == FALSE) {
    $type = 'all';
  }

  // It's not a valid month or not valid year
  $year_options = range(date('Y', time()) - 2, date('Y', time()) + 5);
  if ($month < 1 || $month > 12 || !in_array($year, $year_options)) {
    $year = date('Y', time());
    $month = date('n', time());
  }

  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'rooms_unit');
  if ($type != 'all') {
    $efq->entityCondition('bundle', $type, '=');
  }
  $efq->pager(20);
  $rooms_units = $efq->execute();

  $rooms_id = $units = array();
  if ($rooms_units) {
    $units = entity_load('rooms_unit', array_keys($rooms_units['rooms_unit']));
    $units = array_values(rooms_unit_access_filter('pricing', $units, $account = NULL));

    $rooms_id = array();
    foreach ($units as $value) {
      $rooms_id[] = $value->unit_id;
    }
  }

  // Return the full render array.
  return array(
    drupal_get_form('rooms_filter_month_form', $month, $year),
    drupal_get_form('rooms_pricing_update_form', $month, $year, $type, $units),
    array(
      '#theme' => 'pager',
    ),
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'rooms_pricing') . '/css/rooms_pricing.css'),
      'js' => array(
        drupal_get_path('module', 'rooms_pricing') . '/js/rooms_pricing_management.js',
        array(
          'data' => array(
            'roomsUnitManagement' => array(
              'roomsNumber' => count($rooms_id),
              'currentMonth' => $month,
              'currentYear' => $year,
              'roomsId' => $rooms_id
            ),
          ),
          'type' => 'setting',
        )
      )
    )
  );
}

/**
 * Form to manage the room units pricing.
 *
 * @see rooms_pricing_bulk_pricing_management()
 */
function rooms_pricing_update_form($form, &$form_state, $month, $year, $type, $rooms_units) {

  $form['#attributes']['class'][] = 'rooms-management-form rooms-bulk-pricing-form';

  $form['rooms_pricing_update'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update Pricing'),
    '#description' => t('Apply a pricing adjustment in bulk to the units selected below for the specified date range.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['rooms_pricing_update']['curr_month'] = array(
    '#type' => 'hidden',
    '#value' => $month,
  );

  $form['rooms_pricing_update']['curr_year'] = array(
    '#type' => 'hidden',
    '#value' => $year,
  );

  $form['rooms_pricing_update']['curr_type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );

  $form['rooms_pricing_update']['rooms_date_range'] = rooms_date_range_fields($year, $month);

  $form['rooms_pricing_update']['day_options'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Days of the Week applicable'),
    '#options' => array(
      '1' => t('Sun'),
      '2' => t('Mon'),
      '3' => t('Tue'),
      '4' => t('Wed'),
      '5' => t('Thu'),
      '6' => t('Fri'),
      '7' => t('Sat'),
    ),
  );

  $form['rooms_pricing_update']['op'] = array(
    '#type' => 'fieldset',
  );

  $price_options = rooms_price_options_options();
  $form['rooms_pricing_update']['op']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#options' => $price_options,
    '#default_value' =>  'replace',
  );

  $form['rooms_pricing_update']['op']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => '',
    '#size' => '5',
    '#description' => t('Amount to apply for rule'),
    '#maxlength' => 10,
    '#required' => TRUE,
  );

  $form['rooms_pricing_update']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  $form['rooms_pricing_update']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Unit Pricing'),
  );

  $form['#validate'][] = 'rooms_pricing_update_form_validate';
  $form['#validate'][] = 'rooms_form_start_end_dates_validate';

  $form['rooms_data'] = array(
    '#prefix' => '<table class="rooms-month-manager">',
    '#type' => 'container',
    '#suffix' => '</tbody></table>',
  );

  if (count($rooms_units) > 0) {
    $date = new DateTime();
    $date->setDate($year, $month, '01');
    $form['rooms_data']['select-all'] = array(
      '#type' => 'select',
      '#prefix' => '<thead><tr><th class="unit-bulk-select">',
      '#options' => array(t('- Select -'), t('All (this page)'), t('All (all pages)'), t('None')),
      '#suffix' => '</th><th class="month-name"><div class="fc-header-title"><h2>' . format_date($date->getTimestamp(), 'custom', 'F Y') . '</h2></div></th></tr></thead><tbody>',
    );

    if (variable_get('ROOMS_SELECT_ALL_PAGES_PR') == 'true') {
      $form['rooms_data']['select-all']['#default_value'] = '2';
    }
  }

  foreach ($rooms_units as $key => $value) {
    $form['rooms_data']['rooms-'.$value->unit_id] = array(
      '#type' => 'checkbox',
      '#title' => $value->name,
      '#prefix' => '<tr><th class="unit-name">',
      '#suffix' => '</th><td class="unit-days"><div id="calendar' . $key . '"></div></td></tr>',
    );

    if (variable_get('ROOMS_SELECT_ALL_PAGES_PR') == 'true') {
      $form['rooms_data']['rooms-' . $value->unit_id]['#default_value'] = '1';
    }
  }

  return $form;
}

/**
 * Validate callback for rooms_pricing_update_form form.
 */
function rooms_pricing_update_form_validate(&$form, &$form_state) {
  // Make sure amount entered is numeric
  if (!empty($form_state['values']['amount']) && !is_numeric($form_state['values']['amount'])) {
    form_set_error('amount', t('%name: you must enter a numeric value for the price.', array('%name' => t('Amount'))));
  }
  // validate that a rooms is selected
  _rooms_select_rooms_validation($form_state);
}

/**
 * Submit callback for rooms_pricing_update_form form.
 */
function rooms_pricing_update_form_submit(&$form, &$form_state) {
  list($start_date, $end_date) = rooms_form_input_get_start_end_dates($form_state);
  $type = $form_state['values']['curr_type'];
  $operation = $form_state['values']['operation'];
  $amount = $form_state['values']['amount'];
  $days = array_filter($form_state['values']['day_options']);

  if (variable_get('ROOMS_SELECT_ALL_PAGES_PR') == 'true') {
    $query = db_select('rooms_units', 'n')->fields('n', array('unit_id', 'name'));
    if ($type != 'all') {
      $query->condition('type', $type , '=');
    }
    $rooms_units = $query->execute()->fetchAll();

    foreach ($rooms_units as $room) {
      $unit_id = $room->unit_id ;

      if (!empty($days)) {

        // Get all the pricing events for the date range
        $rc = new UnitPricingCalendar($unit_id);
        $events = $rc->calculatePricingEvents($unit_id, $amount, $start_date, $end_date, $operation, $days);

        $rc->updateCalendar($events);

      }
      else {

        // Get all the pricing events for the date range
        $rc = new UnitPricingCalendar($unit_id);
        $pe = new PricingEvent($unit_id, $amount, $start_date, $end_date, $operation);
        $events = array($pe);

        $rc->updateCalendar($events);

      }
    }
  }
  else {
    foreach ($form_state['values'] as $key => $value) {
      if (strpos($key, 'rooms-') === 0 && $value == '1') {
        $unit_id = str_replace('rooms-', '', $key);

        if (!empty($days)) {

          // Get all the pricing events for the date range
          $rc = new UnitPricingCalendar($unit_id);
          $events = $rc->calculatePricingEvents($unit_id, $amount, $start_date, $end_date, $operation, $days);

          $rc->updateCalendar($events);

        }
        else {

          // Get all the pricing events for the date range
          $rc = new UnitPricingCalendar($unit_id);
          $pe = new PricingEvent($unit_id, $amount, $start_date, $end_date, $operation);
          $events = array($pe);

          $rc->updateCalendar($events);

        }
      }
    }
  }

  variable_set('ROOMS_SELECT_ALL_PAGES_PR', 'false');
}

function rooms_pricing_pr_ajax_callback() {
  if ($_POST['select-all'] == '1') {
    variable_set('ROOMS_SELECT_ALL_PAGES_PR', 'true');
  }
  else {
    variable_set('ROOMS_SELECT_ALL_PAGES_PR', 'false');
  }
}
